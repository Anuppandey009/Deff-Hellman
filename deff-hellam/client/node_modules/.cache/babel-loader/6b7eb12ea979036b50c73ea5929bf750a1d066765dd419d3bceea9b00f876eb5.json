{"ast":null,"code":"var _jsxFileName = \"F:\\\\deffi-hellam\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport forge from 'node-forge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EncryptionComponent = () => {\n  _s();\n  const [inputData, setInputData] = useState('');\n  const [encryptedData, setEncryptedData] = useState('');\n  const handleInputChange = e => {\n    setInputData(e.target.value);\n  };\n  const handleEncrypt = () => {\n    // Step 1: Generate Diffie-Hellman parameters\n    const dh = forge.diffieHellman.create();\n    dh.generateKeys(256);\n    const publicKey = dh.getPublicKey();\n\n    // Step 2: Exchange public keys\n    // Simulating the other party's public key received\n    const otherPartyPublicKey = '<other_party_public_key>';\n\n    // Step 3: Compute the shared secret key\n    const otherPublicKey = forge.util.createBuffer(forge.util.decode64(otherPartyPublicKey));\n    const sharedSecret = dh.computeSecret(otherPublicKey);\n\n    // Step 4: Encrypt the input data\n    const cipher = forge.cipher.createCipher('AES-CBC', sharedSecret.toString());\n    const iv = forge.random.getBytesSync(16);\n    cipher.start({\n      iv\n    });\n    cipher.update(forge.util.createBuffer(inputData));\n    cipher.finish();\n    const encrypted = cipher.output.toHex();\n    setEncryptedData(encrypted);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputData,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEncrypt,\n      children: \"Encrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Encrypted Data: \", encryptedData]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(EncryptionComponent, \"OjWV4tNHlJSPk9oNCixZLfKhEGw=\");\n_c = EncryptionComponent;\nexport default EncryptionComponent;\nvar _c;\n$RefreshReg$(_c, \"EncryptionComponent\");","map":{"version":3,"names":["React","useState","forge","jsxDEV","_jsxDEV","EncryptionComponent","_s","inputData","setInputData","encryptedData","setEncryptedData","handleInputChange","e","target","value","handleEncrypt","dh","diffieHellman","create","generateKeys","publicKey","getPublicKey","otherPartyPublicKey","otherPublicKey","util","createBuffer","decode64","sharedSecret","computeSecret","cipher","createCipher","toString","iv","random","getBytesSync","start","update","finish","encrypted","output","toHex","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["F:/deffi-hellam/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport forge from 'node-forge';\n\nconst EncryptionComponent = () => {\n  const [inputData, setInputData] = useState('');\n  const [encryptedData, setEncryptedData] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputData(e.target.value);\n  };\n\n  const handleEncrypt = () => {\n    // Step 1: Generate Diffie-Hellman parameters\n    const dh = forge.diffieHellman.create();\n    dh.generateKeys(256);\n    const publicKey = dh.getPublicKey();\n\n    // Step 2: Exchange public keys\n    // Simulating the other party's public key received\n    const otherPartyPublicKey = '<other_party_public_key>';\n\n    // Step 3: Compute the shared secret key\n    const otherPublicKey = forge.util.createBuffer(forge.util.decode64(otherPartyPublicKey));\n    const sharedSecret = dh.computeSecret(otherPublicKey);\n\n    // Step 4: Encrypt the input data\n    const cipher = forge.cipher.createCipher('AES-CBC', sharedSecret.toString());\n    const iv = forge.random.getBytesSync(16);\n    cipher.start({ iv });\n    cipher.update(forge.util.createBuffer(inputData));\n    cipher.finish();\n    const encrypted = cipher.output.toHex();\n\n    setEncryptedData(encrypted);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={inputData} onChange={handleInputChange} />\n      <button onClick={handleEncrypt}>Encrypt</button>\n      <div>Encrypted Data: {encryptedData}</div>\n    </div>\n  );\n};\n\nexport default EncryptionComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMU,iBAAiB,GAAIC,CAAC,IAAK;IAC/BJ,YAAY,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B;IACA,MAAMC,EAAE,GAAGd,KAAK,CAACe,aAAa,CAACC,MAAM,CAAC,CAAC;IACvCF,EAAE,CAACG,YAAY,CAAC,GAAG,CAAC;IACpB,MAAMC,SAAS,GAAGJ,EAAE,CAACK,YAAY,CAAC,CAAC;;IAEnC;IACA;IACA,MAAMC,mBAAmB,GAAG,0BAA0B;;IAEtD;IACA,MAAMC,cAAc,GAAGrB,KAAK,CAACsB,IAAI,CAACC,YAAY,CAACvB,KAAK,CAACsB,IAAI,CAACE,QAAQ,CAACJ,mBAAmB,CAAC,CAAC;IACxF,MAAMK,YAAY,GAAGX,EAAE,CAACY,aAAa,CAACL,cAAc,CAAC;;IAErD;IACA,MAAMM,MAAM,GAAG3B,KAAK,CAAC2B,MAAM,CAACC,YAAY,CAAC,SAAS,EAAEH,YAAY,CAACI,QAAQ,CAAC,CAAC,CAAC;IAC5E,MAAMC,EAAE,GAAG9B,KAAK,CAAC+B,MAAM,CAACC,YAAY,CAAC,EAAE,CAAC;IACxCL,MAAM,CAACM,KAAK,CAAC;MAAEH;IAAG,CAAC,CAAC;IACpBH,MAAM,CAACO,MAAM,CAAClC,KAAK,CAACsB,IAAI,CAACC,YAAY,CAAClB,SAAS,CAAC,CAAC;IACjDsB,MAAM,CAACQ,MAAM,CAAC,CAAC;IACf,MAAMC,SAAS,GAAGT,MAAM,CAACU,MAAM,CAACC,KAAK,CAAC,CAAC;IAEvC9B,gBAAgB,CAAC4B,SAAS,CAAC;EAC7B,CAAC;EAED,oBACElC,OAAA;IAAAqC,QAAA,gBACErC,OAAA;MAAOsC,IAAI,EAAC,MAAM;MAAC5B,KAAK,EAAEP,SAAU;MAACoC,QAAQ,EAAEhC;IAAkB;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpE3C,OAAA;MAAQ4C,OAAO,EAAEjC,aAAc;MAAA0B,QAAA,EAAC;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChD3C,OAAA;MAAAqC,QAAA,GAAK,kBAAgB,EAAChC,aAAa;IAAA;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV,CAAC;AAACzC,EAAA,CAxCID,mBAAmB;AAAA4C,EAAA,GAAnB5C,mBAAmB;AA0CzB,eAAeA,mBAAmB;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}