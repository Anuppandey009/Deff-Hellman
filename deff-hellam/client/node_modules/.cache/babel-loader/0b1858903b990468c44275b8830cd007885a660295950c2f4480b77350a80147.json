{"ast":null,"code":"var _jsxFileName = \"F:\\\\deffi-hellam\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport axios from \"axios\";\nimport crypto from 'crypto-browserify';\nimport { Buffer } from 'buffer';\nimport { Transform } from 'stream-browserify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nglobal.Buffer = Buffer;\nglobal.Transform = Transform;\nwindow.Transform = Transform;\nconst App = () => {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [encryptedText, setEncryptedText] = useState(\"\");\n  useEffect(() => {\n    GET_KEY();\n  }, []);\n  const GET_KEY = () => {\n    // Creating Client\n\n    const client = crypto.createDiffieHellman(256);\n    const clientPublicKey = client.generateKeys().toString('base64');\n\n    // Get Server Public key\n    axios.get(`http://localhost:5000/profile`, {\n      clientPublicKey: clientPublicKey\n    }).then(response => {\n      const serverPublicKey = Buffer.from(response.data, 'base64');\n      const sharedSecret = client.computeSecret(serverPublicKey, 'base64');\n      axios.post(`http://localhost:5000/homeinfo`, {\n        sharedSecret: sharedSecret\n      }).then(response => {\n        var iv = Buffer.from(response.data.iv, 'hex');\n        const decipher = crypto.createDecipheriv('aes-256-cbc', sharedSecret, iv);\n        let decrypted = decipher.update(response.data.encrypted, 'hex', 'utf8');\n        decrypted += decipher.final('utf8');\n        localStorage.setItem('decrypted_KEY', JSON.stringify(decrypted.replaceAll('\"', '')));\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputText,\n      onChange: e => setInputText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => encryptData(inputText),\n      children: \"Encrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"encryptedText :\", String(encryptedText)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"asazlBvBUNQ7vSeUpJ8ZViYDqaE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","CryptoJS","axios","crypto","Buffer","Transform","jsxDEV","_jsxDEV","global","window","App","_s","inputText","setInputText","encryptedText","setEncryptedText","GET_KEY","client","createDiffieHellman","clientPublicKey","generateKeys","toString","get","then","response","serverPublicKey","from","data","sharedSecret","computeSecret","post","iv","decipher","createDecipheriv","decrypted","update","encrypted","final","localStorage","setItem","JSON","stringify","replaceAll","children","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","encryptData","String","_c","$RefreshReg$"],"sources":["F:/deffi-hellam/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport axios from \"axios\";\n\nimport crypto from 'crypto-browserify';\nimport { Buffer } from 'buffer';\nimport { Transform } from 'stream-browserify';\n\nglobal.Buffer = Buffer;\nglobal.Transform = Transform;\nwindow.Transform = Transform;\n\nconst App = () => {\n  const [inputText, setInputText] = useState(\"\");\n  const [encryptedText, setEncryptedText] = useState(\"\");\n\nuseEffect(() => {\n\t\tGET_KEY();\n\t}, []);\n  \n\n\tconst GET_KEY = () => {\n\t\t// Creating Client\n\n\t\tconst client = crypto.createDiffieHellman(256);\n\t\tconst clientPublicKey = client.generateKeys().toString('base64');\n\n\t\t// Get Server Public key\n\t\taxios.get(`http://localhost:5000/profile`, {\n\t\t\tclientPublicKey: clientPublicKey,\n\t\t}).then((response) => {\n\t\t\tconst serverPublicKey = Buffer.from(response.data, 'base64');\n\t\t\tconst sharedSecret = client.computeSecret(serverPublicKey, 'base64');\n\n\t\t\taxios.post(`http://localhost:5000/homeinfo`, {\n\t\t\t\tsharedSecret: sharedSecret,\n\t\t\t}).then((response) => {\n\t\t\t\tvar iv = Buffer.from(response.data.iv, 'hex');\n\n\t\t\t\tconst decipher = crypto.createDecipheriv('aes-256-cbc', sharedSecret, iv);\n\n\t\t\t\tlet decrypted = decipher.update(response.data.encrypted, 'hex', 'utf8');\n\t\t\t\tdecrypted += decipher.final('utf8');\n\n\t\t\t\tlocalStorage.setItem('decrypted_KEY', JSON.stringify(decrypted.replaceAll('\"', '')));\n\t\t\t});\n\t\t});\n\t};\n\n\n\n  \n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={inputText}\n        onChange={(e) => setInputText(e.target.value)}\n      />\n      <button onClick={() => encryptData(inputText)}>Encrypt</button>\n      <div>encryptedText :{String(encryptedText)}</div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}