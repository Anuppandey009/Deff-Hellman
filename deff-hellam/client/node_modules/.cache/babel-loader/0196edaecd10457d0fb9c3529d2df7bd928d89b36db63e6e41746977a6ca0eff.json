{"ast":null,"code":"var _jsxFileName = \"F:\\\\deffi-hellam\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport crypto from 'crypto-js';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const EncryptionComponent = () => {\n  const [inputData, setInputData] = useState('');\n  const [encryptedData, setEncryptedData] = useState('');\n  const handleInputChange = e => {\n    setInputData(e.target.value);\n  };\n  const handleEncrypt = () => {\n    // Step 1: Generate Diffie-Hellman parameters\n    const dh = crypto.diffieHellman(256);\n    const publicKey = dh.generateKeys('base64');\n\n    // Step 2: Exchange public keys\n    // Simulating the other party's public key received\n    const otherPartyPublicKey = '<other_party_public_key>';\n\n    // Step 3: Compute the shared secret key\n    const sharedSecret = dh.computeSecret(otherPartyPublicKey, 'base64', 'hex');\n\n    // Step 4: Encrypt the input data\n    const encrypted = crypto.AES.encrypt(inputData, sharedSecret).toString();\n    setEncryptedData(encrypted);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Defii--Hellam test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputData,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEncrypt,\n      children: \"Encrypt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Encrypted Data: \", encryptedData]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OjWV4tNHlJSPk9oNCixZLfKhEGw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["crypto","React","useState","jsxDEV","_jsxDEV","App","_s","inputData","setInputData","encryptedData","setEncryptedData","handleInputChange","e","target","value","handleEncrypt","dh","diffieHellman","publicKey","generateKeys","otherPartyPublicKey","sharedSecret","computeSecret","encrypted","AES","encrypt","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["F:/deffi-hellam/src/App.js"],"sourcesContent":["\nimport crypto from 'crypto-js';\nimport React, { useState } from 'react';\n\n\nfunction App() {\n  // const EncryptionComponent = () => {\n  const [inputData, setInputData] = useState('');\n  const [encryptedData, setEncryptedData] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputData(e.target.value);\n  };\n\n  const handleEncrypt = () => {\n    // Step 1: Generate Diffie-Hellman parameters\n    const dh = crypto.diffieHellman(256);\n    const publicKey = dh.generateKeys('base64');\n\n    // Step 2: Exchange public keys\n    // Simulating the other party's public key received\n    const otherPartyPublicKey = '<other_party_public_key>';\n\n    // Step 3: Compute the shared secret key\n    const sharedSecret = dh.computeSecret(otherPartyPublicKey, 'base64', 'hex');\n\n    // Step 4: Encrypt the input data\n    const encrypted = crypto.AES.encrypt(inputData, sharedSecret).toString();\n\n    setEncryptedData(encrypted);\n  };\n  return (\n    <div className=\"App\">\n    <div>Defii--Hellam test</div>\n     <input type=\"text\" value={inputData} onChange={handleInputChange} />\n      <button onClick={handleEncrypt}>Encrypt</button>\n      <div>Encrypted Data: {encryptedData}</div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,MAAM,MAAM,WAAW;AAC9B,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMS,iBAAiB,GAAIC,CAAC,IAAK;IAC/BJ,YAAY,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B;IACA,MAAMC,EAAE,GAAGhB,MAAM,CAACiB,aAAa,CAAC,GAAG,CAAC;IACpC,MAAMC,SAAS,GAAGF,EAAE,CAACG,YAAY,CAAC,QAAQ,CAAC;;IAE3C;IACA;IACA,MAAMC,mBAAmB,GAAG,0BAA0B;;IAEtD;IACA,MAAMC,YAAY,GAAGL,EAAE,CAACM,aAAa,CAACF,mBAAmB,EAAE,QAAQ,EAAE,KAAK,CAAC;;IAE3E;IACA,MAAMG,SAAS,GAAGvB,MAAM,CAACwB,GAAG,CAACC,OAAO,CAAClB,SAAS,EAAEc,YAAY,CAAC,CAACK,QAAQ,CAAC,CAAC;IAExEhB,gBAAgB,CAACa,SAAS,CAAC;EAC7B,CAAC;EACD,oBACEnB,OAAA;IAAKuB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACpBxB,OAAA;MAAAwB,QAAA,EAAK;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC5B5B,OAAA;MAAO6B,IAAI,EAAC,MAAM;MAACnB,KAAK,EAAEP,SAAU;MAAC2B,QAAQ,EAAEvB;IAAkB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnE5B,OAAA;MAAQ+B,OAAO,EAAEpB,aAAc;MAAAa,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChD5B,OAAA;MAAAwB,QAAA,GAAK,kBAAgB,EAACnB,aAAa;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV;AAAC1B,EAAA,CAlCQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAoCZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}